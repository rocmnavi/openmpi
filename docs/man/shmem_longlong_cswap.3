.\" Man page generated from reStructuredText.
.
.TH "SHMEM_LONGLONG_CSWAP" "3" "Apr 08, 2024" "" "Open MPI"
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.INDENT 0.0
.INDENT 3.5
.UNINDENT
.UNINDENT
.sp
\fI\%shmem_int_cswap\fP(3), shmem_int4_cswap(3),
shmem_int8_cswap(3), \fI\%shmem_long_cswap\fP(3),
\fI\%shmem_longlong_cswap\fP(3) \- Performs an atomic conditional swap to a
remote data object
.SH SYNOPSIS
.sp
C or C++:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#include <mpp/shmem.h>

int shmem_int_cswap(int *target, int cond, int value, int pe)

long shmem_long_cswap(long *target, long cond, long value,
  int pe)

long long shmem_longlong_cswap(longlong *target,
  longlong cond, longlong value, int pe)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Fortran:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
INCLUDE "mpp/shmem.fh"

INTEGER pe

INTEGER(KIND=4) SHMEM_INT4_CSWAP
ires = SHMEM_INT4_CSWAP(target, cond, value, pe)

INTEGER(KIND=8) SHMEM_INT8_CSWAP
ires = SHMEM_INT8_CSWAP(target, cond, value, pe)
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DESCRIPTION
.sp
The conditional swap routines conditionally update a target data object
on an arbitrary processing element (PE) and return the prior contents of
the data object in one atomic operation.
.sp
The arguments are as follows:
.INDENT 0.0
.TP
.B target
The remotely accessible integer data object to be updated on the
remote PE. If you are using C/C++, the type of target should match
that implied in the SYNOPSIS section. If you are using the Fortran
compiler, it must be of type integer with an element size of 4 bytes
for SHMEM_INT4_ADD and 8 bytes for SHMEM_INT8_ADD.
.TP
.B value
The value to be atomically added to target. If you are using C/C++,
the type of value should match that implied in the SYNOPSIS section.
If you are using Fortran, it must be of type integer with an element
size of target.
.TP
.B pe
An integer that indicates the PE number upon which target is to be
updated. If you are using Fortran, it must be a default integer
value.
.TP
.B target
The remotely accessible integer data object to be updated on the
remote PE. If you are using C/C++, the data type of target should
match that implied in the SYNOPSIS section. If you are using Fortran,
it must be of the following type:
.sp
\fBSHMEM_INT4_CSWAP\fP: 4\-byte integer
.sp
\fBSHMEM_INT8_CSWAP\fP: 8\-byte integer
.TP
.B cond
cond is compared to the remote target value. If cond and the remote
target are equal, then value is swapped into the remote target.
Otherwise, the remote target is unchanged. In either case, the old
value of the remote target is returned as the function return value.
cond must be of the same data type as target.
.TP
.B value
The value to be atomically written to the remote PE. value must be
the same data type as target.
.TP
.B pe
An integer that indicates the PE number upon which target is to be
updated. If you are using Fortran, it must be a default integer
value.
.UNINDENT
.SH NOTES
.sp
The term remotely accessible is defined in \fIintro_shmem\fP(3).
.SH RETURN VALUES
.sp
The contents that had been in the target data object on the remote PE
prior to the conditional swap.
.SH EXAMPLES
.sp
The following call ensures that the first PE to execute the conditional
swap will successfully write its PE number to race_winner on PE 0.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
main()
{
  static int race_winner = \-1;
  int oldval;

  shmem_init();
  oldval = shmem_int_cswap(&race_winner, \-1, shmem_my_pe(), 0);
  if (oldval == \-1)
    printf("pe %d was first\en",shmem_my_pe());
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
\fIintro_shmem\fP(3) \fIshmem_cache\fP(3) \fIshmem_swap\fP(3)
.UNINDENT
.UNINDENT
.SH COPYRIGHT
2003-2024, The Open MPI Community
.\" Generated by docutils manpage writer.
.
